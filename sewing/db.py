# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/db.ipynb (unless otherwise specified).

__all__ = ['ensure_unique_nodes', 'guild_node', 'user_node', 'channel_node', 'ensure_guild', 'guilds', 'register_user',
           'unregister_user', 'set_email', 'get_email', 'seeall', 'add_channel', 'remove_channel',
           'summarized_channels', 'add_suggestion']

# Cell
import time
from neo4j.exceptions import ClientError
from mranderson.db import Query, fetch
import mranderson.node as node
import mranderson.constraints as constraints

# Cell
def ensure_unique_nodes():
    results = {}
    for n in ('Guild', 'User', 'Channel'):
        constraints.uniqueness(n, 'id')
    return results


# Cell

def guild_node(guild, variable_name='guild'):
    gid = guild.id
    return node.txt('Guild', variable=variable_name, id=gid)

def user_node(user, variable_name='user'):
    name = user.name
    uid = user.id
    discrim = user.discriminator
    return node.txt('User', variable=variable_name, id=uid, name=name, discriminator=discrim)

def channel_node(channel, variable_name='channel'):
    return node.txt('Channel', variable=variable_name, id=channel.id, name=channel.name)

# Cell

def ensure_guild(guild):
    gnode = guild_node(guild)
    node.ensure('Guild',
                search_properties={'id': guild.id},
                node_properties={'name': guild.name})

def guilds():
    q = Query()
    q.add("MATCH (guild:Guild) RETURN guild")
    return q.data()

# Cell

def register_user(user, guild):
    ensure_guild(guild)

    unode = user_node(user)
    if guild:
        gnode = guild_node(guild)
    q = Query()
    q.add("MERGE")
    q.add(unode)
    q.add("WITH user")
    q.add("MATCH")
    q.add(gnode)
    q.add("WITH user, guild")
    q.add("MERGE (user)-[:BELONGS_TO]->(guild)")
    return q.create()

def unregister_user(user, guild):
    q = Query()
    guild_n = guild_node(guild)
    q.add('MATCH')
    q.add(user_node(user))
    q.add('-[belongs:BELONGS_TO]->')
    q.add(guild_n)
    q.add("DELETE belongs")
    return q.create()


# Cell
def set_email(user, email):
    unode = user_node(user)
    q = Query()
    q.add("MERGE")
    q.add(unode)
    q.add("WITH user")
    q.add("SET user.email='{}'".format(email))
    return q.create()

def get_email(user):
    unode = user_node(user)
    q = Query()
    q.add("MATCH")
    q.add(unode)
    q.add("RETURN user.email as email")
    return q.only()

# Cell
def seeall():
    q = Query()
    q.add("MATCH (n) return n")
    return q.data()

#seeall()


# Cell
def add_channel(channel, guild):
    ensure_guild(guild)

    q = Query()
    q.add("MERGE")
    q.add(channel_node(channel))
    q.add("WITH channel")
    q.add("MATCH")
    q.add(guild_node(guild))
    q.add("WITH channel, guild")
    q.add("MERGE (channel)-[:IN]->(guild)")
    return q.create()

def remove_channel(channel, guild):
    q = Query()
    q.add("MATCH")
    q.add(channel_node(channel))
    q.add('-[:IN]->')
    q.add(guild_node(guild))
    q.add("DETACH DELETE channel")
    return q.create()

def summarized_channels(guild, names_only=True):
    q = Query()
    q.add("MATCH")
    q.add(guild_node(guild))
    q.add('<-[:IN]-')
    q.add('(channel:Channel)')
    q.add("RETURN channel")
    resp = q.data()
    if names_only:
        return [chan['channel']['name'] for chan in resp]
    else:
        return resp

# Cell
def add_suggestion(user, *args, ts=None):
    ts = ts or time.time()
    suggestion = ' '.join(args)
    q = Query()
    q = Query()
    q.add("MERGE")
    q.add(user_node(user))
    q.add("MERGE")
    q.add(node.txt('Suggestion', 'suggestion', body=suggestion, ts=ts))
    q.add("WITH user, suggestion")
    q.add("MERGE (user)-[:MADE]->(suggestion)")
    return q.create()