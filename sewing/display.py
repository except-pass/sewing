# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/display.ipynb (unless otherwise specified).

__all__ = ['encode', 'DiscordEncoder', 'Formatter', 'serialize_content', 'html_content']

# Cell
import discord


# Cell

import json


def encode(u):
    if isinstance(u, discord.Message):
        ts = u.created_at
        serialized = "({ts}){author}: {content}".format(ts=ts.strftime("%b %d %Y %H:%M:%S"),
                                                        author=u.author.name,
                                                        content=u.content)
        return serialized
    elif isinstance(u, discord.Thread):
        return 'Thread: {}'.format(u.name)
    elif isinstance(u, discord.TextChannel):
        return 'Channel: {}'.format(u.name)
    elif isinstance(u, discord.Guild):
        return 'Guild: {}'.format(u.name)
    else:
        type_name = u.__class__.__name__
        raise TypeError("Unexpected type {0}".format(type_name))

class DiscordEncoder(json.JSONEncoder):
    def default(self, u):
        if isinstance(u, discord.Message):
            """
            serialized = {
                "id": u.id,
                "content": u.content,
                "author": u.author.name,
                "created_at": u.created_at.isoformat()
            }
            """
            serialized = "({ts}){author}: {content}".format(ts=u.created_at.isoformat(),
                                                            author=u.author.name,
                                                            content=u.content)
            return serialized
        elif isinstance(u, discord.Thread):
            return 'Thread: {}'.format(u.name)
        elif isinstance(u, discord.TextChannel):
            return 'Channel: {}'.format(u.name)
        elif isinstance(u, discord.Guild):
            return 'Guild: {}'.format(u.name)
        else:
            #type_name = u.__class__.__name__
            #raise TypeError("Unexpected type {0}".format(type_name))
            return json.JSONEncoder.default(self, obj)


class Formatter:
    def __init__(self):
        self.lines = []

    def add(self, thing):
        #entry = json.dumps(thing, cls=DiscordEncoder)
        entry = encode(thing)
        self.lines.append(entry)


# Cell

#TODO change the data model for this to something more standard.
# use only strings for the keywords rather than discord objects
def serialize_content(guild_content):
    fmt = Formatter()
    print('--------- content summary -------------')
    for guild, channels_d in guild_content.items():
        fmt.add(guild)
        for channel_obj, thread_d in channels_d.items():
            fmt.add(channel_obj)
            for thread, msg_list in thread_d.items():
                if msg_list:
                    fmt.add(thread)
                for msg in msg_list:
                    fmt.add(msg)
    return fmt.lines

def html_content(guild_content):
    lines = serialize_content(guild_content)
    print(lines)
    return '\n<br>'.join(lines)